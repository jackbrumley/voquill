name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

jobs:
  release:
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: 'macos-latest'
            args: '--target x86_64-apple-darwin'
            target: 'x86_64-apple-darwin'
            arch: 'x86_64'
            os: 'macos'
          - platform: 'ubuntu-22.04'
            args: '--target x86_64-unknown-linux-gnu'
            target: 'x86_64-unknown-linux-gnu'
            arch: 'x86_64'
            os: 'linux'
          - platform: 'windows-latest'
            args: '--target x86_64-pc-windows-msvc'
            target: 'x86_64-pc-windows-msvc'
            arch: 'x86_64'
            os: 'windows'

    runs-on: ${{ matrix.platform }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install dependencies (ubuntu only)
        if: matrix.platform == 'ubuntu-22.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.1-dev libgtk-3-dev libayatana-appindicator3-dev librsvg2-dev build-essential curl wget file libssl-dev libasound2-dev libxdo-dev

      - name: Rust setup
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './rust -> target'

      - name: Sync node version and setup cache
        uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'
          cache: 'npm'
          cache-dependency-path: './rust/ui/package.json'

      - name: Install frontend dependencies
        run: npm install
        working-directory: ./rust/ui

      - name: Build frontend
        run: npm run build
        working-directory: ./rust/ui

      - name: Install Tauri CLI
        run: cargo install tauri-cli --version "^2.0.0"

      - name: Build the app
        run: cargo tauri build ${{ matrix.args }}
        working-directory: ./rust

      - name: Rename binary for release (Windows)
        if: matrix.os == 'windows'
        run: |
          cp rust/target/${{ matrix.target }}/release/voquill.exe rust/target/${{ matrix.target }}/release/voquill-windows-${{ matrix.arch }}.exe

      - name: Rename binary for release (macOS)
        if: matrix.os == 'macos'
        run: |
          cp rust/target/${{ matrix.target }}/release/voquill rust/target/${{ matrix.target }}/release/voquill-macos-${{ matrix.arch }}

      - name: Rename binary for release (Linux)
        if: matrix.os == 'linux'
        run: |
          cp rust/target/${{ matrix.target }}/release/voquill rust/target/${{ matrix.target }}/release/voquill-linux-${{ matrix.arch }}

      - name: Upload artifacts (Windows)
        if: matrix.os == 'windows'
        uses: actions/upload-artifact@v4
        with:
          name: voquill-${{ matrix.os }}-${{ matrix.arch }}
          path: |
            rust/target/${{ matrix.target }}/release/voquill-windows-${{ matrix.arch }}.exe
            rust/target/${{ matrix.target }}/release/bundle/msi/*.msi

      - name: Upload artifacts (macOS)
        if: matrix.os == 'macos'
        uses: actions/upload-artifact@v4
        with:
          name: voquill-${{ matrix.os }}-${{ matrix.arch }}
          path: |
            rust/target/${{ matrix.target }}/release/voquill-macos-${{ matrix.arch }}
            rust/target/${{ matrix.target }}/release/bundle/dmg/*.dmg

      - name: Upload artifacts (Linux)
        if: matrix.os == 'linux'
        uses: actions/upload-artifact@v4
        with:
          name: voquill-${{ matrix.os }}-${{ matrix.arch }}
          path: |
            rust/target/${{ matrix.target }}/release/voquill-linux-${{ matrix.arch }}
            rust/target/${{ matrix.target }}/release/bundle/deb/*.deb
            rust/target/${{ matrix.target }}/release/bundle/appimage/*.AppImage

  build-flatpak:
    needs: release
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download Linux artifacts
        uses: actions/download-artifact@v4
        with:
          name: voquill-linux-x86_64
          path: flatpak-build

      - name: Install Flatpak
        run: |
          sudo apt-get update
          sudo apt-get install -y flatpak flatpak-builder
          sudo flatpak remote-add --if-not-exists flathub https://flathub.org/repo/flathub.flatpakrepo
          sudo flatpak install -y flathub org.freedesktop.Platform//23.08 org.freedesktop.Sdk//23.08

      - name: Build Flatpak
        run: |
          cd flatpak
          flatpak-builder --force-clean --repo=repo build-dir com.voquill.voquill.yml

      - name: Export Flatpak bundles
        run: |
          cd flatpak
          # Create bundled version (includes runtime - frictionless installation)
          flatpak build-bundle --runtime repo voquill-bundled.flatpak com.voquill.voquill
          # Create standard version (smaller, requires runtime to be installed separately)
          flatpak build-bundle repo voquill-standard.flatpak com.voquill.voquill

      - name: Upload Flatpak artifacts
        uses: actions/upload-artifact@v4
        with:
          name: voquill-flatpak
          path: |
            flatpak/voquill-bundled.flatpak
            flatpak/voquill-standard.flatpak

  create-release:
    needs: [release, build-flatpak]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            artifacts/**/*
          generate_release_notes: true
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
